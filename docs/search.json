[{"path":"https://github.com/anirbanshaw24/bakerrr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Anirban Shaw Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/log_file.html","id":"passing-arguments-to-callrr_bg","dir":"Articles","previous_headings":"","what":"Passing arguments to callr::r_bg()","title":"Logging to File","text":"bakerrr uses callr::r_bg() hood. r_bg() arguments can passed via bg_args argument bakerrr()","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/log_file.html","id":"setup-a-sample-function-and-its-args_list","dir":"Articles","previous_headings":"Passing arguments to callr::r_bg()","what":"Setup a sample function and its args_list","title":"Logging to File","text":"","code":"# Example: Data processing pipeline process_data <- function(dataset_id, filter_col, threshold) {   # Input validation   if (is.null(dataset_id) || !is.character(dataset_id)) {     stop(\"Invalid or missing dataset_id: must be character and non-null.\")   }   if (!filter_col %in% c(\"score\", \"value\", \"rating\")) {     stop(\"filter_col must be one of 'score', 'value', or 'rating'.\")   }   if (!is.numeric(threshold) || threshold <= 0) {     stop(\"threshold must be positive numeric.\")   }    # Simulate loading data   set.seed(as.integer(sub(\"DS_\", \"\", dataset_id))) # Reproducible per job   n <- sample(100:500, 1)   data <- tibble::tibble(     id = seq_len(n),     score = round(runif(n, 0, 100)),     value = round(rnorm(n, 50, 15)),     rating = sample(1:10, n, replace = TRUE)   )    # Apply filter   filtered <- dplyr::filter(data, data[[filter_col]] >= threshold)    Sys.sleep(runif(1, 0.5, 2))  # Simulate processing time    list(     dataset_id = dataset_id,     total_records = n,     filtered_records = nrow(filtered),     filter_applied = paste(filter_col, \">=\", threshold),     timestamp = Sys.time(),     preview = head(filtered, 3)   ) }  # Generate robust argument sets set.seed(42) args_list <- purrr::map(1:12, ~ list(   dataset_id = paste0(\"DS_\", .x),   filter_col = sample(c(\"score\", \"value\", \"rating\"), 1),   threshold = sample(50:95, 1) ))  # Add intentional error cases args_list[[5]] <- list(   dataset_id = NULL,         # error: dataset_id missing   filter_col = \"score\",   threshold = 75 ) args_list[[7]] <- list(      # error: invalid filter_col   dataset_id = \"DS_7\",   filter_col = \"unknown_col\",   threshold = 80 )  args_list[[9]] <- list(      # error: invalid threshold   dataset_id = \"DS_9\",   filter_col = \"score\",   threshold = -15 )"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/log_file.html","id":"write-outputs-and-errors-to-file-while-running-jobs","dir":"Articles","previous_headings":"Passing arguments to callr::r_bg()","what":"Write outputs and errors to file while running jobs","title":"Logging to File","text":"initiating bakerrr bakerrr::bakerrr(), pass callr::r_bg() arguments bg_args argument :","code":"stirr_job <- bakerrr::bakerrr(   fun = process_data,   args_list = args_list,   n_daemons = min(4, length(args_list)),    # Note how parameters are passed to callr::r_bg()   bg_args = list(     stdout = \"bakerrr_out.log\",     stderr = \"bakerrr_err.log\"   ) )  # Execute with real-time monitoring stirr_job <- stirr_job |>   bakerrr::run_jobs(wait_for_results = TRUE)  # Get results stirr_job@results"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/simple_example.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Bake Parallel Jobs in Background with bakerrr","text":"bakerrr S7 class enables efficient background parallel job orchestration R, making easy apply function multiple sets arguments using configurable daemons. vignette demonstrates usage sample inputs inspects job status results.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/simple_example.html","id":"job-architecture","dir":"Articles","previous_headings":"","what":"Job Architecture","title":"Bake Parallel Jobs in Background with bakerrr","text":"Daemons: Background R processes execute jobs parallel Arguments List: element contains named arguments target function Results Collection: Automatic aggregation error capture reporting","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/simple_example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Bake Parallel Jobs in Background with bakerrr","text":"Define simple function generate list argument sets, introducing mix numeric non-numeric (error-producing) cases.","code":"fun <- function(x, y) {   Sys.sleep(2)   x + y }  # Note how each list item is a set of arguments for the function above. args_list <- list(   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   list(x = \"p\", y = ceiling(rnorm(1) * 10)),  # Intentional type error   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   # Add more sets as needed   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)),   list(x = ceiling(rnorm(1) * 10), y = ceiling(rnorm(1) * 10)) )"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/simple_example.html","id":"creating-and-running-jobs","dir":"Articles","previous_headings":"Setup","what":"Creating and Running Jobs","title":"Bake Parallel Jobs in Background with bakerrr","text":"Instantiate bakerrr object process jobs parallel configurable daemon count.","code":"new_stirr <- bakerrr::bakerrr(   fun,   args_list,   n_daemons = 4 ) |>   bakerrr::run_jobs(wait_for_results = TRUE)"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/simple_example.html","id":"inspecting-status-and-results","dir":"Articles","previous_headings":"Setup","what":"Inspecting Status and Results","title":"Bake Parallel Jobs in Background with bakerrr","text":"Print job summary view results. Note jobs triggering errors report error messages designed.","code":"print(new_stirr) new_stirr@results #> [[1]] #> [1] -11 #>  #> [[2]] #> Error in purrr::in_parallel: non-numeric argument to binary operator #>  #> [[3]] #> [1] 7 #>  #> [[4]] #> [1] -6 #>  #> [[5]] #> [1] -4 #>  #> [[6]] #> [1] -7 #>  #> [[7]] #> [1] 28 #>  #> [[8]] #> [1] -10 #>  #> [[9]] #> [1] -23 #>  #> [[10]] #> [1] 6"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/simple_example.html","id":"notes","dir":"Articles","previous_headings":"Setup","what":"Notes","title":"Bake Parallel Jobs in Background with bakerrr","text":"Use n_daemons control parallel worker count based available cores. Error handling built ; results include error messages failed jobs. can pass additional background job options via bg_args. details, see function-level documentation explore extending additional job handlers reporting tools.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"mirai & bakerrr","text":"vignette compares two approaches parallel processing R: mirai bakerrr. packages enable parallel execution computationally intensive tasks, different design philosophies usage patterns.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"mirai & bakerrr","text":"’ll use bootstrap calculation function simulates long-running computations:","code":"library(mirai) library(bakerrr) #>  #> Attaching package: 'bakerrr' #> The following object is masked from 'package:mirai': #>  #>     status #> The following object is masked from 'package:base': #>  #>     summary  long_stat_calc <- function(x, n_boot, sleep_time) {   # x: numeric vector   # n_boot: number of bootstraps   # sleep_time: pause after each bootstrap (sec)    if (!is.numeric(x)) stop(\"Input x must be numeric.\")   if (length(x) < 2) stop(\"Input x must have at least 2 values.\")    start_time <- Sys.time()   boot_means <- numeric(n_boot)    for (i in seq_len(n_boot)) {     boot_means[i] <- mean(sample(x, replace = TRUE))     if (sleep_time > 0) Sys.sleep(sleep_time)   }    end_time <- Sys.time()    result <- list(     boot_mean = mean(boot_means),     boot_sd   = sd(boot_means),     elapsed   = difftime(end_time, start_time, units = \"secs\")   )   class(result) <- \"long_stat_calc\"   result }  # Print method for easy reporting print.long_stat_calc <- function(x, ...) {   cat(\"Bootstrap Mean:\", x$boot_mean, \"\\n\")   cat(\"Bootstrap SD:  \", x$boot_sd, \"\\n\")   cat(\"Elapsed Time:  \", x$elapsed, \"seconds\\n\") }"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"mirai & bakerrr","text":"","code":"# Arguments for 10 parallel jobs args_list <- list(   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002),   list(rnorm(100), n_boot = 3000, sleep_time = 0.002) )"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"mirai-implementation","dir":"Articles","previous_headings":"","what":"mirai Implementation","title":"mirai & bakerrr","text":"mirai provides lightweight, async-focused approach:","code":"# Clean slate mirai::daemons(0) set.seed(10)  mirai_timing <- system.time({   mirai::daemons(6)  # Start 6 daemon processes    res <- mirai::mirai_map(     .x = list(       rnorm(100), rnorm(100), rnorm(100), rnorm(100),       rnorm(100), rnorm(100), rnorm(100), rnorm(100),       rnorm(100), rnorm(100)     ),     .f = long_stat_calc,     .args = list(n_boot = 3000, sleep_time = 0.002)   )    # Check progress and collect results   res[.progress]   mirai_results <- res[.flat] }) #> ■■■■                              10% | ETA:  1m #> ■■■■■■■■■■■■■■■■■■■■■■            70% | ETA:  6s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  100% | ETA:  0s  print(mirai_timing) #>    user  system elapsed  #>   0.061   0.011  13.490 mirai::daemons(0)  # Clean up"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"bakerrr-implementation","dir":"Articles","previous_headings":"","what":"bakerrr Implementation","title":"mirai & bakerrr","text":"bakerrr offers object-oriented approach built-job management:","code":"bakerrr_timing <- system.time({   baker <- bakerrr::bakerrr(     long_stat_calc,     args_list = args_list,     n_daemons = 6     # Optional: bg_args = list(stdout = \"out.log\", stderr = \"error.log\") # nolint   ) |>     bakerrr::run_jobs(wait_for_results = TRUE)    bakerrr_results <- baker@results })  print(bakerrr_timing) #>    user  system elapsed  #>  14.335   2.730  13.821"},{"path":[]},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"performance","dir":"Articles","previous_headings":"Comparison","what":"Performance","title":"mirai & bakerrr","text":"approaches show similar performance CPU-bound tasks, actual timing dependent : Task complexity Number workers System resources Overhead differences","code":""},{"path":[]},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"mirai","dir":"Articles","previous_headings":"Comparison > API Design","what":"mirai:","title":"mirai & bakerrr","text":"Functional programming style Explicit daemon management Direct result collection Minimal syntax","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"bakerrr","dir":"Articles","previous_headings":"Comparison > API Design","what":"bakerrr:","title":"mirai & bakerrr","text":"Object-oriented approach Automatic resource management Built-logging options Method chaining support","code":""},{"path":[]},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"choose-mirai-when","dir":"Articles","previous_headings":"Comparison > Use Cases","what":"Choose mirai when:","title":"mirai & bakerrr","text":"need fine-grained control async operations Working streaming reactive computations Minimal dependencies important Direct integration async patterns","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"choose-bakerrr-when","dir":"Articles","previous_headings":"Comparison > Use Cases","what":"Choose bakerrr when:","title":"mirai & bakerrr","text":"prefer object-oriented workflows Built-logging error handling valuable Working within larger application frameworks Method chaining fits coding style","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"results-inspection","dir":"Articles","previous_headings":"","what":"Results Inspection","title":"mirai & bakerrr","text":"","code":"# Both approaches return similar structured results str(mirai_results[[1]]) #>  num -0.0305 str(bakerrr_results[[1]]) #> List of 3 #>  $ boot_mean: num 0.0713 #>  $ boot_sd  : num 0.105 #>  $ elapsed  : 'difftime' num 6.43045783042908 #>   ..- attr(*, \"units\")= chr \"secs\" #>  - attr(*, \"class\")= chr \"long_stat_calc\"  # Print first result from each method print(mirai_results[[1]]) #> [1] -0.03050123 print(bakerrr_results[[1]]) #> Bootstrap Mean: 0.07132461  #> Bootstrap SD:   0.1045766  #> Elapsed Time:   6.430458 seconds"},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"mirai & bakerrr","text":"mirai bakerrr provide effective parallel processing capabilities. choice depends specific requirements: mirai: Lightweight, functional, explicit control bakerrr: Object-oriented, feature-rich, automatic management production workflows requiring robust error handling logging, bakerrr may preferable. performance-critical applications needing minimal overhead, mirai better choice.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/articles/vs_mirai.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"mirai & bakerrr","text":"","code":"sessionInfo() #> R version 4.4.2 (2024-10-31) #> Platform: x86_64-pc-linux-gnu #> Running under: Red Hat Enterprise Linux 8.10 (Ootpa) #>  #> Matrix products: default #> BLAS/LAPACK: /usr/lib64/libopenblasp-r0.3.15.so;  LAPACK version 3.9.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices datasets  utils     methods   base      #>  #> other attached packages: #> [1] bakerrr_0.1.0 mirai_2.5.0   #>  #> loaded via a namespace (and not attached): #>  [1] vctrs_0.6.5       cli_3.6.5         knitr_1.50        rlang_1.1.6       #>  [5] xfun_0.53         processx_3.8.6    purrr_1.1.0       renv_1.1.4        #>  [9] S7_0.2.0          textshaping_1.0.3 carrier_0.3.0.4   jsonlite_2.0.0    #> [13] glue_1.8.0        nanonext_1.7.0    htmltools_0.5.8.1 ps_1.9.1          #> [17] ragg_1.5.0        sass_0.4.10       rmarkdown_2.29    evaluate_1.0.5    #> [21] jquerylib_0.1.4   fastmap_1.2.0     yaml_2.3.10       lifecycle_1.0.4   #> [25] config_0.3.2      compiler_4.4.2    fs_1.6.6          htmlwidgets_1.6.4 #> [29] rstudioapi_0.17.1 systemfonts_1.2.3 digest_0.6.37     R6_2.6.1          #> [33] parallel_4.4.2    magrittr_2.0.4    callr_3.7.6       bslib_0.9.0       #> [37] tools_4.4.2       pkgdown_2.1.3     cachem_1.1.0      desc_1.4.3"},{"path":"https://github.com/anirbanshaw24/bakerrr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anirban Shaw. Author, maintainer.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shaw (2025). bakerrr: Background-Parallel Jobs. R package version 0.1.0, https://github.com/anirbanshaw24/bakerrr.","code":"@Manual{,   title = {bakerrr: Background-Parallel Jobs},   author = {Anirban Shaw},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/anirbanshaw24/bakerrr}, }"},{"path":[]},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"elegant-s7-based-parallel-job-orchestration-for-r","dir":"","previous_headings":"","what":"Elegant S7-based parallel job orchestration for R","title":"Background-Parallel Jobs","text":"{bakerrr} provides clean, modern interface running background parallel jobs using S7 classes, mirai daemons, callr process management. Perfect computationally intensive workflows need robust error handling progress monitoring.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Background-Parallel Jobs","text":"S7 Class System: Type-safe, modern R object system Parallel Processing: Efficient daemon-based parallelization via mirai Background Execution: Non-blocking job execution callr::r_bg Error Resilience: Built-tryCatch error handling per job Progress Monitoring: Console spinner live status updates Flexible Configuration: Customizable daemon count cleanup options Clean API: Intuitive print(), summary(), run_jobs(wait_for_results) methods","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Background-Parallel Jobs","text":"can install development version bakerrr GitHub :","code":"install.packages(\"bakerrr\")"},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Background-Parallel Jobs","text":"","code":"# Define your function compute_sum <- function(x, y) {   Sys.sleep(1)  # Simulate work   x + y }  # Create argument lists for each job args_list <- list(   list(x = 1, y = 2),   list(x = 3, y = 4),   list(x = 5, y = 6),   list(x = 7, y = 8) )  # Create and run bakerrr job job <- bakerrr::bakerrr(   fun = compute_sum,   args_list = args_list,   n_daemons = 2 ) |>    bakerrr::run_jobs(wait_for_results = TRUE)  # Check results job@results #> [[1]] #> [1] 3 #>  #> [[2]] #> [1] 7 #>  #> [[3]] #> [1] 11 #>  #> [[4]] #> [1] 15 #> [[1]] [1] 3 #> [[2]] [1] 7   #> [[3]] [1] 11 #> [[4]] [1] 15  print(job) #> ✅ bakerrr #> ├─ Status: COMPLETED #> ├─ Function: compute_sum #> ├─ Args: 4 sets #> ├─ Daemons: 2 #> ├─ Cleanup: enabled #> ├─ Process alive: FALSE #> ├─ Result: #> │  └─ List with 4 elements"},{"path":[]},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"error-handling","dir":"","previous_headings":"Advanced Usage","what":"Error Handling","title":"Background-Parallel Jobs","text":"","code":"# Function that may fail risky_function <- function(x) {   if (x == \"error\") stop(\"Intentional error\")   x * 2 }  args_list <- list(   list(x = 5),   list(x = \"error\"),  # This will fail gracefully   list(x = 10) )  job <- bakerrr::bakerrr(risky_function, args_list) |>   bakerrr::run_jobs(wait_for_results = FALSE) job@results #> [1] \"sleeping\" #> [[1]] [1] 10 #> [[2]] [1] \"Error in purrr::in_parallel: Intentional error\" #> [[3]] [1] 20"},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"background-job-arguments","dir":"","previous_headings":"Advanced Usage","what":"Background Job Arguments","title":"Background-Parallel Jobs","text":"","code":"# Custom logging and process options job <- bakerrr::bakerrr(   fun = compute_sum,   args_list = args_list,   bg_args = list(     stdout = \"job_output.log\",     stderr = \"job_errors.log\",     supervise = TRUE   ) ) |>   bakerrr::run_jobs(wait_for_results = FALSE)"},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"asynchronous-execution","dir":"","previous_headings":"Advanced Usage","what":"Asynchronous Execution","title":"Background-Parallel Jobs","text":"","code":"long_running_function <- function() {   Sys.sleep(5) } # Start job without waiting job <- bakerrr::bakerrr(long_running_function, args_list) |>    bakerrr::run_jobs(wait_for_results = FALSE)  # Check status later summary(job) #>           Length           Class1           Class2             Mode  #>                1 bakerrr::bakerrr        S7_object           object #> ⏳ BackgroundParallelJob [running] - 4 daemons, 10 jobs  # Get results when ready if (!job@bg_job_status$is_alive()) {   results <- job@results }"},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"performance-tips","dir":"","previous_headings":"","what":"Performance Tips","title":"Background-Parallel Jobs","text":"Optimal Daemon Count: Start ceiling(cores / 5), adjust based workload Batch Size: Group small tasks reduce overhead Memory Usage: Monitor bg_args = list(supervise = TRUE) Error Recovery: Use tryCatch functions custom error handling","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Background-Parallel Jobs","text":"S7: Modern object system mirai: High-performance parallelization callr: Background R processes purrr: Functional programming toolkit cli: Progress indicators glue: String interpolation","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bakerrr.html","id":null,"dir":"Reference","previous_headings":"","what":"S7 bakerrr class for job orchestration and background processing — bakerrr","title":"S7 bakerrr class for job orchestration and background processing — bakerrr","text":"Defines bakerrr S7 class parallel background job execution. Stores function run (fun), argument lists (args_list), background job arguments (bg_args), job objects, results, runtime properties. Supports retrieval job status/results validation provided properties.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bakerrr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S7 bakerrr class for job orchestration and background processing — bakerrr","text":"","code":"bakerrr(   fun,   args_list,   bg_args = list(),   n_daemons = ceiling(parallel::detectCores()/5),   cleanup = TRUE )"},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bakerrr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S7 bakerrr class for job orchestration and background processing — bakerrr","text":"fun Function executed job. args_list List argument sets job. bg_args List arguments passed background job handler. n_daemons Number parallel workers (default: ceiling cores/5). cleanup Logical; whether clean jobs execution (default: TRUE).","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bakerrr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S7 bakerrr class for job orchestration and background processing — bakerrr","text":"S7 bakerrr class object job orchestration methods properties.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bakerrr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S7 bakerrr class for job orchestration and background processing — bakerrr","text":"","code":"# Create a bakerrr object to process jobs in parallel bakerrr::bakerrr(fun = sum, args_list = list(list(1:10), list(10:20))) #>  #> 🔄 bakerrr #> ├─ Status: CREATED #> ├─ Function: .Primitive(\"sum\") #> ├─ Args: 2 sets #> ├─ Daemons: 7 #> ├─ Cleanup: enabled #> ├─ Result: #>      └─  - bakerrr:: Job not started. Start job by calling"},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bg_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Background parallel processing of jobs using purrr and tryCatch — bg_func","title":"Background parallel processing of jobs using purrr and tryCatch — bg_func","text":"Executes list job specifications parallel, applies given function error handling, collects results error messages.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bg_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Background parallel processing of jobs using purrr and tryCatch — bg_func","text":"","code":"bg_func(jobs, n_daemons)"},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bg_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Background parallel processing of jobs using purrr and tryCatch — bg_func","text":"jobs list job specifications, containing function (fun) arguments (args). n_daemons Number parallel workers","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/bg_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Background parallel processing of jobs using purrr and tryCatch — bg_func","text":"list results, error messages case failure.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for bakerrr S7 job objects — print","title":"Print method for bakerrr S7 job objects — print","text":"Displays concise summary bakerrr job object, including current status, function name, number argument sets, daemon count, cleanup setting, process status, result summary. Outputs status icon key runtime information quick inspection.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for bakerrr S7 job objects — print","text":"x bakerrr S7 job object. ... Additional arguments (currently ignored).","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for bakerrr S7 job objects — print","text":"input x, invisibly, printing summary.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for running background jobs in bakerrr — run_bg","title":"Generic for running background jobs in bakerrr — run_bg","text":"Initiates background execution bakerrr job object, launching jobs via callr::r_bg. Stores process status bg_job_status.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for running background jobs in bakerrr — run_bg","text":"","code":"run_bg(x, ...)"},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for running background jobs in bakerrr — run_bg","text":"x bakerrr S7 job object. ... used. future expansion.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic for running background jobs in bakerrr — run_bg","text":"input x, invisibly, launching background jobs.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_jobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Run bakerrr jobs and wait for completion — run_jobs","title":"Run bakerrr jobs and wait for completion — run_jobs","text":"Launches parallel jobs, manages daemon setup (mirai::daemons), initiates background jobs, provides console spinner progress, optionally waits results. Cleans daemons execution.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_jobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run bakerrr jobs and wait for completion — run_jobs","text":"","code":"run_jobs(job, wait_for_results, ...)"},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_jobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run bakerrr jobs and wait for completion — run_jobs","text":"job bakerrr S7 job object. wait_for_results Logical; whether block wait completion (default: TRUE). ... used. future expansion.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/run_jobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run bakerrr jobs and wait for completion — run_jobs","text":"updated bakerrr job object, invisibly.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Status method for bakerrr S7 job objects — status","title":"Status method for bakerrr S7 job objects — status","text":"Returns job status \"waiting\", \"running\", \"done\".","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status method for bakerrr S7 job objects — status","text":"","code":"status(x, ...)"},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status method for bakerrr S7 job objects — status","text":"x bakerrr S7 job object. ... arguments (ignored).","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status method for bakerrr S7 job objects — status","text":"One \"waiting\", \"running\", \"done\".","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for bakerrr S7 job objects — summary","title":"Summary method for bakerrr S7 job objects — summary","text":"Provides one-line summary bakerrr job object, indicating status, function name, number worker daemons, total jobs. Prints status icon brief job info.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for bakerrr S7 job objects — summary","text":"","code":"summary(x, ...)"},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for bakerrr S7 job objects — summary","text":"x bakerrr S7 job object. ... Additional arguments (currently ignored).","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for bakerrr S7 job objects — summary","text":"input x, invisibly, printing summary.","code":""},{"path":"https://github.com/anirbanshaw24/bakerrr/news/index.html","id":"bakerrr-010","dir":"Changelog","previous_headings":"","what":"bakerrr 0.1.0","title":"bakerrr 0.1.0","text":"CRAN release: 2025-10-01 Initial CRAN Release.","code":""}]
